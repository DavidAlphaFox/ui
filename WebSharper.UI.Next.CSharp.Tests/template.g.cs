//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using WebSharper;
using WebSharper.UI.Next;
using WebSharper.UI.Next.CSharp.Client;
using SDoc = WebSharper.UI.Next.Doc;
using CDoc = WebSharper.UI.Next.Client.Doc;
using DomElement = WebSharper.JavaScript.Dom.Element;
using DomEvent = WebSharper.JavaScript.Dom.Event;
using CAttr = WebSharper.UI.Next.Client.Attr;

namespace Template
{

[JavaScript]
public static class Template
{

public static class Main
{
public static Doc Doc(Doc ListContainer, IRef<string> NewTaskName, Action<DomElement, DomEvent> Add, Action<DomElement, DomEvent> ClearCompleted) => SDoc.Concat(new[]{ SDoc.TextNode("\n            "), SDoc.Element("ul", new[]{ Attr.Create("class", "list-unstyled") }, new[]{ ListContainer }), SDoc.TextNode("\n            "), SDoc.Element("form", new[]{ Attr.Create("onsubmit", "return false") }, new[]{ SDoc.TextNode("\n                "), SDoc.Element("div", new[]{ Attr.Create("class", "form-group") }, new[]{ SDoc.TextNode("\n                    "), SDoc.Element("label", Enumerable.Empty<Attr>(), new[]{ SDoc.TextNode("New task") }), SDoc.TextNode("\n                    "), SDoc.Element("div", new[]{ Attr.Create("class", "input-group") }, new[]{ SDoc.TextNode("\n                        "), CDoc.Input(new[]{ Attr.Create("class", "form-control") }, NewTaskName), SDoc.TextNode("\n                        "), SDoc.Element("span", new[]{ Attr.Create("class", "input-group-btn") }, new[]{ SDoc.TextNode("\n                            "), SDoc.Element("button", new[]{ Attr.Create("class", "btn btn-primary"), Attr.Create("type", "button"), CAttr.Handler("click", FSharpConvert.Fun(Add)) }, new[]{ SDoc.TextNode("Add") }), SDoc.TextNode("\n                        ") }), SDoc.TextNode("\n                    ") }), SDoc.TextNode("\n                    "), SDoc.Element("p", new[]{ Attr.Create("class", "help-block") }, new[]{ SDoc.TextNode("You are going to add: "), CDoc.TextView(NewTaskName.View), SDoc.Element("span", Enumerable.Empty<Attr>(), Enumerable.Empty<Doc>()) }), SDoc.TextNode("\n                ") }), SDoc.TextNode("\n                "), SDoc.Element("button", new[]{ Attr.Create("class", "btn btn-default"), Attr.Create("type", "button"), CAttr.Handler("click", FSharpConvert.Fun(ClearCompleted)) }, new[]{ SDoc.TextNode("Clear selected tasks") }), SDoc.TextNode("\n            ") }), SDoc.TextNode("\n        ") });
}
public static class ListItem
{
public static Doc Doc(Attr ShowDone, IRef<bool> Done, string Task, Action<DomElement, DomEvent> Clear) => SDoc.Concat(new[]{ SDoc.Element("li", Enumerable.Empty<Attr>(), new[]{ SDoc.TextNode("\n                    "), SDoc.Element("div", new[]{ Attr.Create("class", "checkbox") }, new[]{ SDoc.TextNode("\n                        "), SDoc.Element("label", new[]{ ShowDone }, new[]{ SDoc.TextNode("\n                            "), CDoc.CheckBox(new[]{ Attr.Create("type", "checkbox") }, Done), SDoc.TextNode("\n                            "), SDoc.TextNode(Task), SDoc.TextNode("\n                            "), SDoc.Element("button", new[]{ Attr.Create("class", "btn btn-danger btn-xs pull-right"), Attr.Create("type", "button"), CAttr.Handler("click", FSharpConvert.Fun(Clear)) }, new[]{ SDoc.TextNode("X") }), SDoc.TextNode("\n                        ") }), SDoc.TextNode("\n                    ") }), SDoc.TextNode("\n                ") }) });
}
public static Doc Doc() => SDoc.Concat(new[]{ SDoc.Element("html", new[]{ Attr.Create("lang", "en") }, new[]{ SDoc.TextNode("\n"), SDoc.Element("head", Enumerable.Empty<Attr>(), new[]{ SDoc.TextNode("\n    "), SDoc.Element("meta", new[]{ Attr.Create("chartset", "utf-8") }, Enumerable.Empty<Doc>()), SDoc.TextNode("\n    "), SDoc.Element("meta", new[]{ Attr.Create("name", "viewport"), Attr.Create("content", "width=device-width,initial-scale=1.0") }, Enumerable.Empty<Doc>()), SDoc.TextNode("\n    "), SDoc.Element("title", Enumerable.Empty<Attr>(), new[]{ SDoc.TextNode("My TODO list") }), SDoc.TextNode("\n    "), SDoc.Element("link", new[]{ Attr.Create("rel", "stylesheet"), Attr.Create("href", "https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css") }, Enumerable.Empty<Doc>()), SDoc.TextNode("\n    "), SDoc.Element("style", Enumerable.Empty<Attr>(), new[]{ SDoc.TextNode("\n        h1 {\n            margin-top: 0;\n            margin-bottom: 30px;\n        }\n\n        ul {\n            border-bottom: 1px solid lightgray;\n            padding-bottom: 30px;\n        }\n\n            ul > li + li {\n                border-top: 1px dotted lightgray;\n            }\n\n        label {\n            width: 100%;\n            font-weight: bold !important;\n        }\n\n        body {\n            padding: 30px;\n        }\n    ") }), SDoc.TextNode("\n") }), SDoc.TextNode("\n"), SDoc.Element("body", Enumerable.Empty<Attr>(), new[]{ SDoc.TextNode("\n    "), SDoc.Element("div", new[]{ Attr.Create("style", "width: 400px") }, new[]{ SDoc.TextNode("\n        "), SDoc.Element("h1", Enumerable.Empty<Attr>(), new[]{ SDoc.TextNode("My TODO! list") }), SDoc.TextNode("\n        "), SDoc.Element("div", new[]{ Attr.Create("id", "tasks") }, Enumerable.Empty<Doc>()), SDoc.TextNode("\n        "), SDoc.TextNode("\n    ") }), SDoc.TextNode("\n") }), SDoc.TextNode("\n"), SDoc.TextNode("\n") }) });

}
}